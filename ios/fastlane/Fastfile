# Fastfile

# ================================
# 必要な環境変数（例）
# -------------------------------
# APP_IDENTIFIER       ... com.example.app
# TEAM_ID              ... XXXXXXXXXX
# ASC_KEY_ID           ... App Store Connect API Key ID
# ASC_ISSUER_ID        ... App Store Connect Issuer ID
# ASC_API_KEY_P8       ... -----BEGIN PRIVATE KEY----- ... の内容（改行は \n でも可）
# MATCH_GIT_URL        ... match 用の証明書レポジトリ URL
# MATCH_GIT_BRANCH     ... 使いたいブランチ名（未設定なら "main"）
# KEYCHAIN_PASSWORD    ... 一時キーチェーンのパスワード
# ================================

default_platform :ios

platform :ios do
  require 'base64'

  ############################################################
  # 小物ユーティリティ
  ############################################################
  def fetch_env!(key)
    val = ENV[key].to_s
    UI.user_error!("ENV['#{key}'] is missing") if val.empty?
    val
  end

  # p8 の改行/NULL を正規化。万一 base64 で渡された場合は decode を試す
  def normalized_p8
    raw = fetch_env!('ASC_API_KEY_P8')
    # NULL を除去し改行統一
    key = raw.gsub(/\r\n?/, "\n").gsub("\u0000", "")

    return key if key.include?('BEGIN PRIVATE KEY')

    # PEM でなければ Base64 と見なして decode 試行（失敗したら元の値を返す）
    begin
      decoded = Base64.decode64(key)
      return decoded.include?('BEGIN PRIVATE KEY') ? decoded : key
    rescue
      return key
    end
  end

  # match がエクスポートする環境変数から “完全一致のプロファイル名” を取り出す
  def resolved_profile_name(bundle_id)
    key = "sigh_#{bundle_id.gsub('.', '_')}_appstore_profile-name"
    ENV[key] || "match AppStore #{bundle_id}"
  end

  ############################################################
  # 共通: 一時キーチェーン名
  ############################################################
  KEYCHAIN_NAME = 'ci-temp.keychain'

  before_all do
    # （必要なら）特定の Xcode を選ぶ
    # xcode_select "/Applications/Xcode_16.4.app"
  end

  after_all do |lane|
    # クリーンアップ（存在しない時はスキップされる）
    delete_keychain(name: KEYCHAIN_NAME) rescue nil
  end

  error do |lane, exception|
    delete_keychain(name: KEYCHAIN_NAME) rescue nil
  end

  ############################################################
  # メインレーン
  ############################################################
  lane :ci_build_testflight do
    # 1) 一時キーチェーン
    create_keychain(
      name: KEYCHAIN_NAME,
      password: fetch_env!('KEYCHAIN_PASSWORD'),
      default_keychain: false,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    # 2) App Store Connect API Key
    api_key_obj = app_store_connect_api_key(
      key_id:     fetch_env!('ASC_KEY_ID'),
      issuer_id:  fetch_env!('ASC_ISSUER_ID'),
      key_content: normalized_p8
    )

    # 3) CocoaPods
    cocoapods(
      clean_install: true,
      podfile: "App/Podfile"
    )

    # 4) 証明書 / プロビジョニング（match）
    match(
      type: "appstore",
      api_key: api_key_obj,
      app_identifier: [fetch_env!('APP_IDENTIFIER')],
      keychain_name: KEYCHAIN_NAME,
      keychain_password: fetch_env!('KEYCHAIN_PASSWORD'),
      storage_mode: "git",
      git_url: fetch_env!('MATCH_GIT_URL'),
      git_branch: (ENV['MATCH_GIT_BRANCH'] || "main"),
      readonly: false
    )

    # 例: cocoapods と match の後、build_app の前
    ios_dir    = File.expand_path("..", __dir__) # => .../ios
    proj_path  = File.join(ios_dir, "App/App.xcodeproj")
    plist_path = File.join(ios_dir, "App/App/Info.plist")

    UI.message("proj_path = #{proj_path}")
    UI.message("plist_path = #{plist_path}")

    bundle_id    = fetch_env!('APP_IDENTIFIER')
    team_id      = fetch_env!('TEAM_ID')
    profile_name = resolved_profile_name(bundle_id)

    UI.message("Using provisioning profile: #{profile_name}")

    update_app_identifier(
      xcodeproj: proj_path,
      plist_path: plist_path,
      app_identifier: "com.inoueyuichi.marketdemo"
    )

    # 5) Xcode プロジェクトの署名設定（App ターゲットのみ）
    update_code_signing_settings(
      use_automatic_signing: false,
      path: proj_path,
      targets: ["App"],
      team_id: team_id,
      code_sign_identity: "Apple Distribution"
    )

    mapping = lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    bundle_id = fetch_env!("APP_IDENTIFIER") # 自分のバンドルID
    profile_path = ENV["sigh_#{bundle_id}_appstore_profile-path"]

    UI.user_error!("Provisioning profile path not found") if profile_path.to_s.empty?

    update_project_provisioning(
      xcodeproj: "App/App.xcodeproj",
      target_filter: "App",
      build_configuration: "Release",
      profile: profile_path   # ← プロファイル名ではなくパスを渡す！
    )

    # 6) ビルド番号を進める（project=App/App.xcodeproj を暗黙解決）
    increment_build_number(
      xcodeproj: "App/App.xcodeproj"
    )

    # 7) アーカイブ & エクスポート
    #    ここでは xcargs に PROVISIONING_PROFILE_SPECIFIER を渡さない（Pods に波及させない）
    build_app(
      workspace: "App/App.xcworkspace",
      scheme: "App",
      export_method: "app-store",
      xcargs: "DEVELOPMENT_TEAM=#{fetch_env!('TEAM_ID')} CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY='Apple Distribution'",
      export_options: {
        provisioningProfiles: {
          fetch_env!("APP_IDENTIFIER") => ENV["sigh_#{fetch_env!('APP_IDENTIFIER')}_appstore_uuid"]
        }
      }
    )

    # 8) TestFlight へアップロード（必要に応じてオプションは調整）
    upload_to_testflight(
      app_identifier: fetch_env!("APP_IDENTIFIER"),
      skip_submission: true,
      skip_waiting_for_build_processing: true,
      distribute_external: false
    )
  end
end
