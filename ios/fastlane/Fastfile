# Fastfile (iOS / TestFlight CI 用 完全版)
# - GitHub Actions 等のCIで動く前提
# - 証明書/プロファイルは fastlane match (git) を使用
# - 正確な provisioning profile 名を export_options と PROVISIONING_PROFILE_SPECIFIER に指定

# 環境変数を必須で取得するユーティリティ
def require_env!(key, message = nil)
  value = ENV[key]
  UI.user_error!(message || "Missing required environment variable: #{key}") if value.nil? || value.empty?
  value
end

# 先頭付近で
require "base64"

# ...
raw_key = require_env!("ASC_KEY_P8", "ASC_KEY_P8 is empty")

# 1) まずは \n エスケープや CRLF を正規化
key = raw_key.to_s
key = key.gsub("\\n", "\n").gsub(/\r\n?/, "\n").strip

# 2) ヘッダが無く Base64 だけのケースを救済（MII... で始まる等）
if !key.include?("BEGIN") && key.match?(/\A[A-Za-z0-9+\/=\s]+\z/)
  key = Base64.decode64(key).to_s.strip
end

# 3) まだ PEM ヘッダが無ければ付与
unless key.include?("BEGIN PRIVATE KEY")
  key = "-----BEGIN PRIVATE KEY-----\n#{key}\n-----END PRIVATE KEY-----"
end

default_platform :ios

platform :ios do
  ############################################
  # 環境値の取得 & バリデーション
  ############################################
  def require_env!(key, msg = nil)
    v = ENV[key]
    UI.user_error!(msg || "#{key} is empty") if v.to_s.strip.empty?
    v
  end

  before_all do
    # 任意: fastlane の匿名メトリクス無効化
    # opt_out_usage

    # CI用の一時キーチェーン（match が使う）
    create_keychain(
      name: "ci-temp.keychain",
      password: ENV["KEYCHAIN_PASSWORD"] || "ci-temp-pw",
      default_keychain: false,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false,
      add_to_search_list: true
    )
  end

  after_all do
    # 後始末
    delete_keychain(
      name: "ci-temp.keychain"
    )
  end

  ############################
  # メインレーン
  ############################
  desc "CI: build & upload to TestFlight"
  lane :ci_build_testflight do
    # 必須ENV
    team_id     = require_env!("TEAM_ID", "TEAM_ID is empty (Apple Developer Team ID)")
    bundle_id   = require_env!("APP_IDENTIFIER", "APP_IDENTIFIER (Bundle ID) is empty")

    # === App Store Connect API Key（.p8文字列をENVで渡す前提） ===
    #   必要なENV:
    #     ASC_KEY_ID
    #     ASC_ISSUER_ID
    #     ASC_KEY_P8   (-----BEGIN PRIVATE KEY----- から END までの文字列)
    raw_key = require_env!("ASC_KEY_P8", "ASC_KEY_P8 is empty")
    # 改行・制御文字をLFに寄せる簡易サニタイズ
    key_content = raw_key.to_s.gsub(/\r\n?/, "\n").gsub("\u0000", "")
    api_key_obj = app_store_connect_api_key(
      key_id: require_env!("ASC_KEY_ID"),
      issuer_id: require_env!("ASC_ISSUER_ID"),
      key_content: key,
      in_house: false
    )

    # CocoaPods（Podfile のパスを明示。project_directoryが使えない環境でも確実）
    cocoapods(
      podfile: "App/Podfile",
      clean_install: true
    )

    # match で証明書&プロビジョニング取得/インストール
    match(
      type: "appstore",
      api_key: api_key_obj,
      app_identifier: [bundle_id],
      keychain_name: "ci-temp.keychain",
      keychain_password: ENV["KEYCHAIN_PASSWORD"] || "ci-temp-pw",
      storage_mode: "git",
      git_url: require_env!("MATCH_GIT_URL", "MATCH_GIT_URL is empty"),
      git_branch: ENV["MATCH_GIT_BRANCH"] || "main",
      readonly: false,                 # CIで新規作成も許可する場合は false
      skip_set_partition_list: false
    )

    # cf. match が入れてくれる env から、"完全一致の profile 名" を拾う
    # 例: sigh_com_example_app_appstore_profile-name => "match AppStore com.example.app 1756552129"
    env_key = "sigh_#{bundle_id.gsub('.', '_')}_appstore_profile-name"
    profile_name = ENV[env_key]
    if profile_name.to_s.strip.empty?
      # 念のためフォールバック（ただし *完全一致* が必要なので、基本は上で取れるはず）
      profile_name = "match AppStore #{bundle_id}"
    end
    UI.message("Using provisioning profile: #{profile_name}")

    # Xcode プロジェクトは手動署名にしておく（プロファイル名はここでは設定しない）
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "App/App.xcodeproj",
      targets: ["App"],
      team_id: team_id,
      code_sign_identity: "Apple Distribution"
    )

    # 連番ビルド番号
    increment_build_number(
      xcodeproj: "App/App.xcodeproj"
    )

    # アーカイブ & エクスポート
    build_app(
      workspace: "App/App.xcworkspace",
      scheme: "App",
      export_method: "app-store",
      # エクスポート時に bundle_id => profile_name を "完全一致" で指定
      export_options: {
        provisioningProfiles: {
          bundle_id => profile_name
        }
      },
      # xcodebuild にも念のため指定（プロジェクト側に署名設定を残していても上書きできる）
      xcargs: [
        "DEVELOPMENT_TEAM=#{team_id}",
        "CODE_SIGN_STYLE=Manual",
        "CODE_SIGN_IDENTITY=Apple Distribution",
        "PROVISIONING_PROFILE_SPECIFIER=#{profile_name}"
      ].join(" ")
    )

    # TestFlight へアップロード（ipa は build_app が出力したものを自動検出）
    upload_to_testflight(
      api_key: api_key_obj,
      skip_waiting_for_build_processing: true,
      distribute_external: false, # 外部テスター配布なら true に
      changelog: ENV["TF_CHANGELOG"] || "Automated build"
    )
  end
end
