# ios/Fastfile
require "base64"

# --- p8 を生PEM/BASE64どちらで渡されても読めるように＆制御文字を除去 ---
def normalize_p8(env_value)
  raw = env_value.to_s

  # 余計な制御文字を排除（BOM/ヌル/CR など）
  cleaned = raw.delete("\u0000").gsub("\uFEFF", "").gsub("\r", "").strip

  pem = if cleaned.include?("BEGIN PRIVATE KEY")
          cleaned                 # 生PEMで来た
        else
          Base64.decode64(cleaned) # Base64で来た
        end

  pem = pem.delete("\u0000").gsub("\uFEFF", "")

  UI.user_error!("ASC API key doesn't look like a PEM") unless pem.include?("BEGIN PRIVATE KEY")
  UI.message("ASC API key loaded. length=#{pem.length}") # 中身は表示しない（長さのみ）
  pem
end
# ----------------------------------------------------------------------

default_platform(:ios)

platform :ios do
  desc "Build & Upload to TestFlight from CI"
  lane :ci_build_testflight do
    # 必須ENV:
    #   TEAM_ID                ... Apple Developer Team ID（例: ABCDE12345）
    #   APP_IDENTIFIER         ... バンドルID（例: com.example.app）
    #   ASC_KEY_ID             ... App Store Connect API Key ID（例: 2ABCD3EFGH）
    #   ASC_ISSUER_ID          ... App Store Connect Issuer ID（GUID）
    #   ASC_API_KEY_P8_BASE64  ... p8をBase64した1行の文字列（改行なし・引用符なし）
    #
    # 任意ENV:
    #   MATCH_GIT_URL          ... match用certsリポジトリURL（https/sshどちらでも）
    #   MATCH_GIT_BRANCH       ... 上記ブランチ名（未指定ならデフォルトブランチ）
    #   KEYCHAIN_PASSWORD      ... ログインキーチェーンのパスワード（必要なら）
    #   PROFILE_NAME           ... "match AppStore <bundle id>" など、明示したい場合のみ

    # Xcode プロジェクトのTeam設定（ターゲット名などは必要に応じて変更）
    update_project_team(
      path: "App/App.xcodeproj",
      teamid: ENV["TEAM_ID"],
      targets: ["App"]
    )

    # App Store Connect API Key（生PEM/BASE64どちらでもOK）
    api_key = app_store_connect_api_key(
      key_id:    ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: normalize_p8(ENV["ASC_API_KEY_P8_BASE64"]),
      in_house: false
    )

    # CocoaPods（Podfile の場所が違う場合は変更）
    cocoapods(
      clean_install: true,
      podfile: "App/Podfile"
    )

    # 証明書/プロファイルの同期（AppStore用）
    match(
      type: "appstore",
      readonly: false,
      api_key: api_key,
      app_identifier: [ENV["APP_IDENTIFIER"]],
      git_url: ENV["MATCH_GIT_URL"],
      git_branch: ENV["MATCH_GIT_BRANCH"],
      team_id: ENV["TEAM_ID"],
      keychain_name: "login.keychain-db",
      keychain_password: ENV["KEYCHAIN_PASSWORD"]
    )

    # ---- ここを追加：プロファイル名を拾う ----
    # Sigh は  ENV["sigh_<bundle>_appstore_profile-name"] をセットします
    bundle_id   = ENV["APP_IDENTIFIER"]
    env_key     = "sigh_#{bundle_id}_appstore_profile-name"
    profile_name = ENV[env_key]
    UI.user_error!("Provisioning profile name not found in ENV #{env_key}") if profile_name.to_s.strip.empty?

    UI.message("Using provisioning profile: #{profile_name}")

    # ビルド番号を+1
    increment_build_number(
      xcodeproj: "App/App.xcodeproj"
    )

    # Manual Signing を明示しておく（Debug/Release 両方）
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "App/App.xcodeproj",
      targets: ["App"],
      team_id: ENV["TEAM_ID"],
      code_sign_identity: "Apple Distribution",
      # PROFILE_NAME を渡す場合のみ効く。未指定なら下の export_options のマッピングで解決
      profile_name: profile_name # ←重要
    )

    # 3) アーカイブ
    build_app(
      workspace: "App/App.xcworkspace",
      scheme: "App",
      destination: "generic/platform=iOS",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          ENV["APP_IDENTIFIER"] => profile_name
        }
      },
      xcargs: [
        "DEVELOPMENT_TEAM=#{ENV['TEAM_ID']}",
        "CODE_SIGN_STYLE=Manual",
        "CODE_SIGN_IDENTITY='Apple Distribution'"
        # ★ ここに PROVISIONING_PROFILE_SPECIFIER を入れないこと！
      ].join(" ")
    )

    # TestFlight へアップロード
    upload_to_testflight(
      api_key: api_key,
      skip_waiting_for_build_processing: true
    )
  end
end
